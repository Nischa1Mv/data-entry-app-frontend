// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { GetAllDoctypesData, GetAllDoctypesResponses, GetDoctypeByNameData, GetDoctypeByNameErrors, GetDoctypeByNameResponses, GetErpSystemsData, GetErpSystemsResponses, GetItemByIdData, GetItemByIdErrors, GetItemByIdResponses, HealthCheckData, HealthCheckResponses, SubmitFormDataData, SubmitFormDataErrors, SubmitFormDataResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Erp Systems
 */
export const getErpSystems = <ThrowOnError extends boolean = false>(options?: Options<GetErpSystemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetErpSystemsResponses, unknown, ThrowOnError>({
        url: '/api/erp-systems',
        ...options
    });
};

/**
 * Read Root
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Read Item
 */
export const getItemById = <ThrowOnError extends boolean = false>(options: Options<GetItemByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetItemByIdResponses, GetItemByIdErrors, ThrowOnError>({
        url: '/items/{item_id}',
        ...options
    });
};

/**
 * Get Doctype
 */
export const getDoctypeByName = <ThrowOnError extends boolean = false>(options: Options<GetDoctypeByNameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDoctypeByNameResponses, GetDoctypeByNameErrors, ThrowOnError>({
        url: '/doctype/{form_name}',
        ...options
    });
};

/**
 * Get All Doctypes
 */
export const getAllDoctypes = <ThrowOnError extends boolean = false>(options?: Options<GetAllDoctypesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllDoctypesResponses, unknown, ThrowOnError>({
        url: '/doctype',
        ...options
    });
};

/**
 * Submit Single Form
 */
export const submitFormData = <ThrowOnError extends boolean = false>(options: Options<SubmitFormDataData, ThrowOnError>) => {
    return (options.client ?? client).post<SubmitFormDataResponses, SubmitFormDataErrors, ThrowOnError>({
        url: '/submit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
